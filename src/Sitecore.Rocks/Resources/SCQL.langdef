<?xml version="1.0" encoding="utf-8"?>
<!--

Actipro Syntax Language Definition (.langdef)
  For use with Actipro SyntaxEditor and related products.
  http://www.actiprosoftware.com

'Sitecore Query Language' language created by Sitecore.
  Copyright (C) Sitecore 

-->
<LanguageDefinition LanguageKey="SCQL" LanguageDescription="Sitecore Query Language" Creator="Sitecore" Copyright="Copyright (C) Sitecore " xmlns="http://schemas.actiprosoftware.com/langdef/1.0">
	<!-- Classification types -->
	<LanguageDefinition.ClassificationTypes>
		<ClassificationType Key="Attribute" DefaultStyle="#FFFF0000" />
		<ClassificationType Key="Comment" DefaultStyle="#FF008000" />
		<ClassificationType Key="Delimiter" DefaultStyle="#FF0000FF" />
		<ClassificationType Key="Identifier" DefaultStyle="#FF0000FF" />
		<ClassificationType Key="Keyword" DefaultStyle="#FF008000" />
		<ClassificationType Key="Number" DefaultStyle="#FF008080" />
		<ClassificationType Key="Operator" DefaultStyle="#FF0000FF" />
		<ClassificationType Key="ReservedWord" DefaultStyle="#FF008000" />
		<ClassificationType Key="String" DefaultStyle="#FFA31515" />
	</LanguageDefinition.ClassificationTypes>
	<!-- Lexer -->
	<LanguageDefinition.Lexer>
		<DynamicLexer>
			<!-- Default state -->
			<State Id="1" Key="Default">
				<State.ChildStates>
					<StateRef Key="PrimaryString" />
					<StateRef Key="AlternateString" />
					<StateRef Key="EscapedIdentifier" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="1" TokenKey="Whitespace" Pattern="{LineTerminatorWhitespace}+" />
				<ExplicitPatternGroup TokenId="2" TokenKey="OpenParenthesis" ClassificationTypeKey="Delimiter" Pattern="(" />
				<ExplicitPatternGroup TokenId="3" TokenKey="CloseParenthesis" ClassificationTypeKey="Delimiter" Pattern=")" />
				<ExplicitPatternGroup TokenId="4" TokenKey="OpenSquareBrace" ClassificationTypeKey="Delimiter" Pattern="[" />
				<ExplicitPatternGroup TokenId="5" TokenKey="CloseSquareBrace" ClassificationTypeKey="Delimiter" Pattern="]" />
				<ExplicitPatternGroup TokenId="6" TokenKey="Keyword" ClassificationTypeKey="Keyword" LookAheadPattern="{NonWord}|\z" CaseSensitivity="Sensitive">
					<ExplicitPatterns><![CDATA[
						ancestor-or-self ancestor child descendants-or-self descendants following parent preceding
						self
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenId="7" TokenKey="ReservedWord" ClassificationTypeKey="ReservedWord" LookAheadPattern="{NonWord}|\z" CaseSensitivity="Sensitive">
					<ExplicitPatterns><![CDATA[
						update set from insert into
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="8" TokenKey="Identifier" ClassificationTypeKey="Identifier" Pattern="(_|{Alpha})({Word})*" />
				<RegexPatternGroup TokenId="9" TokenKey="Attribute" ClassificationTypeKey="Attribute">
					<RegexPattern Value="\@\#([^\#]*)\#" />
					<RegexPattern Value="\@(_|{Alpha})({Word})*" />
					<RegexPattern Value="\@\@name" />
					<RegexPattern Value="\@\@key" />
					<RegexPattern Value="\@\@id" />
					<RegexPattern Value="\@\@itemname" />
					<RegexPattern Value="\@\@templateitem" />
					<RegexPattern Value="\@\@path" />
					<RegexPattern Value="\@\@version" />
					<RegexPattern Value="\@\@language" />
					<RegexPattern Value="\@\@templateid" />
					<RegexPattern Value="\@\@templatename" />
					<RegexPattern Value="\@\@templatekey" />
					<RegexPattern Value="\@\@masterid" />
					<RegexPattern Value="\@\@masterkey" />
					<RegexPattern Value="\@\@mastername" />
					<RegexPattern Value="\@\@branchid" />
					<RegexPattern Value="\@\@branchkey" />
					<RegexPattern Value="\@\@branchname" />
				</RegexPatternGroup>
				<ExplicitPatternGroup TokenId="10" TokenKey="Operator" ClassificationTypeKey="Operator">
					<ExplicitPatterns><![CDATA[
						* + - .. . // / = and div mod or xor
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="11" TokenKey="RealNumber" ClassificationTypeKey="Number" LookAheadPattern="{NonWord}|\z">
					<RegexPattern Value="{Digit}* \. {Digit}+ ([Ee] [\+\-]? {Digit}+)?" />
					<RegexPattern Value="{Digit}+ [Ee] [\+\-]? {Digit}+" />
				</RegexPatternGroup>
				<RegexPatternGroup TokenId="12" TokenKey="IntegerNumber" ClassificationTypeKey="Number" Pattern="{Digit}+" LookAheadPattern="{NonWord}|\z" />
			</State>
			<!-- PrimaryString state -->
			<State Id="2" Key="PrimaryString" DefaultTokenId="13" DefaultTokenKey="PrimaryStringText" DefaultClassificationTypeKey="String">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="14" TokenKey="PrimaryStringStartDelimiter" Pattern="&quot;" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="15" TokenKey="PrimaryStringEndDelimiter" Pattern="&quot;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<ExplicitPatternGroup TokenId="16" TokenKey="PrimaryStringEscapedDelimiter" Pattern="&quot;&quot;" />
				<RegexPatternGroup TokenId="13" TokenKey="PrimaryStringText" Pattern="[^\&quot;\n]+" />
			</State>
			<!-- AlternateString state -->
			<State Id="3" Key="AlternateString" DefaultTokenId="17" DefaultTokenKey="AlternateStringText" DefaultClassificationTypeKey="String">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="18" TokenKey="AlternateStringStartDelimiter" Pattern="'" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="19" TokenKey="AlternateStringEndDelimiter" Pattern="'" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<ExplicitPatternGroup TokenId="20" TokenKey="AlternateStringEscapedDelimiter" Pattern="''" />
				<RegexPatternGroup TokenId="17" TokenKey="AlternateStringText" Pattern="[^'\n]+" />
			</State>
			<!-- EscapedIdentifier state -->
			<State Id="4" Key="EscapedIdentifier" DefaultTokenId="21" DefaultTokenKey="EscapedIdentifierText" DefaultClassificationTypeKey="Identifier">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="22" TokenKey="EscapedIdentifierStartDelimiter" Pattern="#" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="23" TokenKey="EscapedIdentifierEndDelimiter" Pattern="[\#\n]" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup TokenId="21" TokenKey="EscapedIdentifierText" Pattern="[^\#]+" />
			</State>
		</DynamicLexer>
	</LanguageDefinition.Lexer>
</LanguageDefinition>